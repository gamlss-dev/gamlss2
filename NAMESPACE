import("Formula")
import("gamlss.dist")
import("mgcv")

importFrom("stats", "terms", ".getXlevels", "coef", "dnorm", "lm.wfit",
  "make.link", "model.frame", "model.matrix", "model.offset",
  "model.response", "model.weights", "nlminb", "pnorm",
  "qnorm", "rnorm", "runif", "sd", "update", "predict", "family",
  "density", "fitted", "lm", "ppoints", "qqnorm", "quantile", "residuals",
  "as.formula", "optimHess", "printCoefmat", "pt", "vcov", "AIC", "BIC",
  "formula", "logLik", "na.omit", "var", "optim", "median", "pchisq",
  "na.pass", "reformulate", "cov", "rexp", "rgamma", "loess",
  "deviance", "drop1", "plogis", "qlogis", "setNames")

importFrom("utils", "flush.console", "tail", "getFromNamespace",
  "capture.output", "combn")

importFrom("grDevices", "gray.colors", "n2mfrow", "rgb", "contourLines", "trans3d",
  "dev.off", "png")

importFrom("graphics", "abline", "axis", "barplot", "box", "grid", "hist",
  "lines", "par", "polygon", "rect", "image", "text", "rug", "matplot",
  "points", "legend", "mtext")

importFrom("parallel", "mclapply")

importFrom("mvtnorm", "dmvnorm", "rmvnorm")

importFrom("distributions3", "variance", "pdf", "cdf", "skewness",
  "kurtosis", "random", "is_continuous", "is_discrete", "prodist")

export(
  "fake_formula",
  "gamlss2",
  "gamlss2.formula",
  "gamlss2.list",
  "gamlss2_control",
  "RS",
  "CG",
  "discretize",
  "ologit",
  "special_fit",
  "special_predict",
  "specials",
  "Rsq",
  "GAIC",
  "available_families",
  "find_family",
  "fit_family",
  "response_name",
  "stepwise",
  "step_gamlss2",
  "select_gamlss2",
  "sRS",
  "new_formula",
  "softplus",
  "shiftlog",
  "Kumaraswamy",
  "KS",
  "make.link2",
  "plot_lasso",
  "la",
  "lasso"
)

S3method(gamlss2, formula)
S3method(gamlss2, list)
S3method(plot, gamlss2)
S3method(plot, gamlss2.list)
S3method(predict, gamlss2)
S3method(fitted, gamlss2)
S3method(residuals, gamlss2)
S3method(family, gamlss2)
S3method(logLik, gamlss2)
S3method(deviance, gamlss2)
S3method(special_fit, cf)
S3method(special_predict, cf.fitted)
S3method(special_fit, n)
S3method(special_predict, n.fitted)
S3method(special_fit, tree)
S3method(special_predict, tree.fitted)
S3method(special_predict, default)
S3method(vcov, gamlss2)
S3method(confint, gamlss2)
S3method(coef, gamlss2)
S3method(summary, gamlss2)
S3method(print, gamlss2)
S3method(print, summary.gamlss2)
S3method(print, coef.gamlss2)
S3method(AIC, gamlss2)
S3method(BIC, gamlss2)
S3method(c, gamlss2)
S3method(quantile, gamlss2)
S3method(smooth.construct, lin.smooth.spec)
S3method(Predict.matrix, lin.effect)
S3method(new_formula, default)
S3method(new_formula, select)

S3method(distributions3::prodist, gamlss2)

S3method(anova, gamlss2)
S3method(drop1, gamlss2)
S3method(print, drop1.gamlss2)

## distributions3 class GDF, encapsulating gamlss2 families
export(GDF)
S3method(format, GDF)
S3method(print, GDF)
S3method(mean, GDF)
S3method(distributions3::variance, GDF)
S3method(distributions3::skewness, GDF)
S3method(distributions3::kurtosis, GDF)
S3method(distributions3::pdf, GDF)
S3method(distributions3::log_pdf, GDF)
S3method(distributions3::cdf, GDF)
S3method(quantile, GDF)
S3method(distributions3::random, GDF)
S3method(distributions3::is_continuous, GDF)
S3method(distributions3::is_discrete, GDF)
S3method(distributions3::support, GDF)

S3method(mean, gamlss2)
S3method(median, gamlss2)
S3method(distributions3::variance, gamlss2)
S3method(distributions3::skewness, gamlss2)
S3method(distributions3::kurtosis, gamlss2)
S3method(distributions3::pdf, gamlss2)
S3method(distributions3::log_pdf, gamlss2)
S3method(distributions3::cdf, gamlss2)
S3method(distributions3::random, gamlss2)
S3method(distributions3::is_continuous, gamlss2)
S3method(distributions3::is_discrete, gamlss2)
S3method(distributions3::support, gamlss2)

useDynLib(gamlss2, .registration = TRUE)

