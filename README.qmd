<!-- README.md is generated from README.qmd via: quarto render README.qmd --to gfm -->

# gamlss2: Infrastructure for Flexible Distributional Regression

## Overview 

The primary purpose of this package is to facilitate the creation of advanced infrastructures
designed to enhance the GAMLSS modeling framework. Notably, the `gamlss2` package represents a
significant overhaul of its predecessor, [gamlss`](https://cran.r-project.org/package=gamlss),
with a key emphasis on improving estimation
speed and incorporating more flexible infrastructures. These enhancements enable the seamless
integration of various algorithms into GAMLSS, including gradient boosting, Bayesian estimation,
regression trees, and forests, fostering a more versatile and powerful modeling environment.

Moreover, the package expands its compatibility by supporting all model terms from the base
R [`mgcv](https://cran.r-project.org/package=mgcv) package. Additionally, the `gamlss2` package
introduces the capability to accommodate more than four parameter families. Essentially, this
means that users can now specify any type of model using these new infrastructures, making the
package highly flexible and accommodating to a wide range of modeling requirements.

* The main model function is [`gamlss2()`](https://gamlss-dev.github.io/gamlss2/man/gamlss2.html).
* The default optimizer functions is [`RS()`](https://gamlss-dev.github.io/gamlss2/man/RS_CG.html). Optimizer functions can be exchanged.
* Most important methods: `summary()`, [`plot()`](https://gamlss-dev.github.io/gamlss2/man/plots.html), [`predict()`](https://gamlss-dev.github.io/gamlss2/man/predict.gamlss2.html).
* Easy development of new family objects, see [`?gamlss2,family`](https://gamlss-dev.github.io/gamlss2/man/gamlss2.family.html).
* User-specific "special" terms are possible, see [`?special_terms`](https://gamlss-dev.github.io/gamlss2/man/special_terms.html).

For examples, please visit the manual pages.

```{r help, eval = FALSE}
help(package = "gamlss2")
```

## Installation

The development version of `gamlss2` can be installed via

```{r installation, eval = FALSE}
install.packages("gamlss2",
  repos = c("https://gamlss-dev.R-universe.dev",
            "https://cloud.R-project.org"))
```

## Licence

The package is available under the
[General Public License version 3](https://www.gnu.org/licenses/gpl-3.0.html)
or [version 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html)

## Illustration

```{r preliminaries, echo=FALSE, message=FALSE, results="hide"}
library("gamlss2")
```

The package is designed to follow the workflow of well-established model fitting functions
like `lm()` or `glm()`, i.e., the step of estimating full distributional regression models
is actually not very difficult.

To illustrate the workflow using `gamlss2`, we analyze the `WeatherGermany` data, 

```{r WeatherGermany}
if(!("WeatherGermany" %in% installed.packages())) {
  install.packages('WeatherGermany',
    repos = c("https://gamlss-dev.r-universe.dev",
              "https://cloud.r-project.org"))
}
data("WeatherGermany", package = "WeatherGermany")
head(WeatherGermany)
```

The dataset contains daily observations from weather stations across Germany. It includes the station identifier (`id`), the recording `date`, the maximum wind speed (`Wmax`, in m/s), the precipitation amount (`pre`, in mm), the maximum and minimum temperatures (`Tmax` and `Tmin`, in Â°C), and the number of sunshine hours (`sun`). Additionally, it provides the station's `name`, `alt`itude (in meters above sea level), and its geographic coordinates (`lon`gitude and `lat`itude).

In this example, we use daily maximum temperature (`Tmax`) data to estimate a climatology model based on over 37 years of observations from Germany's highest meteorological station, located at Zugspitze. Situated at an altitude of 2956 meters above sea level, this station provides a unique dataset for high-altitude climate analysis.

First, we subset the dataset to include only observations from the Zugspitze station.

```{r subset}
d <- subset(WeatherGermany, name == "Zugspitze")
```

Before estimating a climatology model using `gamlss2`, it is good practice to inspect the distribution of the response variable

```{r hist_Tmax}
hist(d$Tmax, freq = FALSE, breaks = "Scott")
```

The histogram suggests that the data is slightly left-skewed, with longer tails for temperatures below zero. This indicates that the commonly used normal distribution may not be the most appropriate choice for modeling daily maximum temperatures.

To address this, the `gamlss2` package provides the [`find_family()`](https://gamlss-dev.github.io/gamlss2/man/find_family.html) function, which helps identify the most suitable distribution by minimizing an information criterion, AIC by default. Here, we evaluate several continuous distributions available in the [`gamlss.dist`](https://cran.r-project.org/package=gamlss.dist) package.

```{r find_family}
fams <- find_family(d$Tmax,
  families = c(NO, TF, JSU, SEP4))
print(fams)
```

Here, the SEP4 family appears to provide the best fit. To further assess its suitability, we can visualize the fitted density using

```{r fit_family}
fit_family(d$Tmax, family = SEP4)
```

After identifying a suitable distributional model, we can now incorporate covariates to estimate a full GAMLSS. Since temperature data exhibits a strong seasonal pattern, as illustrated in the following scatterplot

```{r season_scatter}
#| echo: 2:3
par(mar = c(4, 4, 1, 1))
d$yday <- as.POSIXlt(d$date)$yday
plot(Tmax ~ yday, data = d, col = rgb(0.1, 0.1, 0.1, alpha = 0.4))
```

It is essential to include a model term that captures these seasonal effects. The `gamlss2 package supports all model terms from the [`mgcv`](https://cran.r-project.org/package=mgcv) package, allowing us to use the `s()` constructor to model seasonality.

Additionally, we include a time trend to examine whether maximum temperatures have increased over the observed period. In the full GAMLSS model, each parameter of the selected `SEP4` distribution is estimated separately. To incorporate the time trend, we first create a new covariate, `year`, representing the long-term temporal effect

```{r time_trend}
d$year <- as.POSIXlt(d$date)$year + 1900
```

Next, we define the model formula for the four parameters of the `SEP4` distribution.

```{r formula}
f <- Tmax ~ s(yday, bs = "cc") + s(year) |
  s(yday, bs = "cc") + s(year) |
  s(yday, bs = "cc") + s(year) |
  s(yday, bs = "cc") + s(year)
```

In this formula, the vertical bars `|` separate the specifications for each parameter of the `SEP4` distribution. The argument `bs = "cc"` specifies a cyclical spline to account for the seasonal effect, ensuring continuity at the beginning and end of the year.

Finally, we estimate the model using

```{r model}
b <- gamlss2(f, data = d, family = SEP4)
```

This approach allows us to flexibly capture both seasonal patterns and long-term trends in daily maximum temperatures.

After estimating the model, we can examine the model summary using

```{r summary}
summary(b)
```

The summary output is structured similarly to those of `lm()` and `glm()`, with the key difference being that it provides results for all parameters of the selected distribution. Specifically, it displays the estimated linear coefficients (in this case, primarily the intercepts), along with the effective degrees of freedom for each smooth term. Additionally, the AIC and deviance values are reported.

To extract the AIC separately, we use

```{r aic}
AIC(b)
```

Similarly, the log-likelihood can be obtained with

```{r loglik}
logLik(b)
logLik(b, newdata = d)
```

Here we use the `newdata` argument just to show, that the log-likelihood can also be evaluated on,
e.g., out-of-sample data.

Additionally, the estimated effects can be visualized instantly using

```{r effects}
#| fig-height: 6
#| echo: 2
par(mar = c(4, 4, 1, 1))
plot(b, which = "effects")
```

This plot provides a direct visualization of the smooth effects included in the model, helping to interpret seasonal variations and long-term trends efficiently.

Model predictions can be obtained for various statistical quantities, including the mean, quantiles, probability density function (PDF), and cumulative distribution function (CDF). To illustrate this, we first examine the marginal effect of the long-term time trend. For this purpose, we create a new data frame containing only the years of interest.

```{r year_effect}
nd <- data.frame("year" = 1981:2018, "yday" = 182)
```

Next, we predict quantiles by first computing the estimated parameters

```{r parameters}
par <- predict(b, newdata = nd)
```

To compute, e.g., the 50% quantile (median), we extract the [`gamlss2.family`](https://gamlss-dev.github.io/gamlss2/man/gamlss2.family.html) of the fitted model and call the corresponding `$q()` (quantile) function provided by the family.

```{r quantiles}
q50 <- family(b)$q(0.5, par)
```

Finally, we visualize the long-term trend in median temperature.

```{r long_term}
#| echo: 2:3
par(mar = c(4, 4, 1, 1))
plot(nd$year, q50, type = "l", lwd = 2,
  xlab = "Year", ylab = "50% Quantile")
```

The plot reveals a clear upward trend in the median temperature over time, highlighting the effects of long-term climate change.

