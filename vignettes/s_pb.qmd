---
title: "Smooth Terms using s() and pb()"
format: 
  html:
    html-math-method: mathjax
    toc: true
    number-sections: true
bibliography: gamlss2.bib
nocite: |
  @Rigby+Stasinopoulos:2005
  <!-- @Stasinopoulosetal2021 -->
 
  <!-- @Rigbyetal2019 -->
  <!-- @Stasinopoulos2018 -->
  <!-- @Fahrmeir+Kneib+Lang+Marx:2013 -->
  <!-- @Lang+Umlauf+Wechselberger+Harttgen+Kneib:2012 -->
  <!-- @bamlss2018 -->
  <!-- @KleiberZeileis2016 -->
  <!-- @distregvis2019 -->
  <!-- @stasinopoulos2024generalized -->
  <!-- @hofner2015 -->
  <!-- @Hofneretal2014 -->
  <!-- @Mayretal2012 -->
  <!-- @stasinopoulos2023p -->
  <!-- @CarterDavis2015 -->
  <!-- @R:Pinheiro+Bates:2000 -->
  
vignette: >
  %\VignetteIndexEntry{Smooth Terms}
  %\VignetteEngine{quarto::html}
  %\VignetteDepends{gamlss2}
  %\VignetteKeywords{distributional regression, inference, forecasting}
  %\VignettePackage{gamlss2}
---

```{r preliminaries, echo=FALSE, message=FALSE, results="hide"}
library("gamlss2")
```

*Smoothers* are non-parametric techniques developed mostly in the 1980 and 90's. The main advadance of a smoother is to suggest possible functional forms on how the explanatory variables effect the parameters of the response. That is, to let the data to detect non-linearities in the model. There are basically two types of smoothers;

-   the **cubic splines** smoothers and techniques associated with them like;

    -   **thin plate** splines, @Wood17 and;
    -   **P- splines,** @eilers2021practical and

-   the **local polynomial** smoothing, @Clevelandetal93.

There are several ways to use smoothers within the original GAMLSS framework and they are described in Chapter 9 of @Stasinopoulosetal2017. Local polynomials smoothers can be used with `gamlss2` by connection the `R` function `loess()` with `gamlss2` using  `specials`. This connection is described in a different vignette (`Mikis` reference here).   Here we give an explanation  of how use the smooth terms  `s()` and `pb()` within `gamlss2`.

## The `s()` function 



The function `s(...)` is using penalized regression smoothers  and it is identical  to the function `s(...)` used in the `R` package `mgcv`. The first argument of the function specifies the term(s).
For **one dimensional smoother** use something like; 
```{r}
#| warning: false
library(gamlss2)
library(gamlss)
gm11 <- gamlss2(rent~s(area)+s(yearc)+location+bath+kitchen|
               s(area)+s(yearc)+location+bath+kitchen,
               data=rent99, family=GA)

```

Note that **all** the argument for the `s()` function of the `mgcv` package apply here. The most important are;

- `k`; the dimension of the basis;

- `bs`;   indicating the (penalized) smoothing basis to use, e.g. "tp" for thin plate regression spline, "cr" for cubic regression spline etc; 

- `m`;	 The order of the penalty e.g. 2 for cubic spline penalty;

- `by`; a term for **varying coefficient** model;

to find more information  about the extra argument please try; 
```{r}
#| eval: false
?mgcv:::s
```
To visualise the fitted smooth functions try; 
```{r}
plot(gm11)
```
It seems tha both the size of the flat, `area`, and the year of construction, `yearc`, need smoothing functions for the $\mu$ model while only `yearc` need smother for the $\sigma$ model.    

Modelling interaction in additive smooth model we need two or more dimensional smoothers. Of course more that two ways interactions can not be visualised easily so we usally stick to  **two dimensional** smoothers;
```{r}
gm21 <- gamlss2(rent~s(area,yearc)+location+bath+kitchen|
                  s(area,yearc)+location+bath+kitchen,
               data=rent99, family=GA)
plot(gm21)
```



## The `pb()` function 

```{r}
gm1 <- gamlss2(rent~pb(area)+pb(yearc)+location+bath+kitchen|pb(area)+pb(yearc)+
                 location+bath+kitchen,data=rent99, family=GA)
plot(gm1)
```


```{r}
# gm2 <- gamlss2(rent~pb(area,yearc)+location+bath+kitchen,
#                data=rent99, family=GA)

```
