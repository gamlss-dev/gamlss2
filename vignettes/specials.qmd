---
title: "Special Model Terms"
format: 
  html:
    html-math-method: mathjax
    toc: true
    number-sections: true
bibliography: gamlss2.bib
nocite: |
  @Rigby+Stasinopoulos:2005
vignette: >
  %\VignetteIndexEntry{specials}
  %\VignetteEngine{quarto::html}
  %\VignetteDepends{gamlss2}
  %\VignetteKeywords{distributional regression, loess}
  %\VignettePackage{gamlss2}
---

```{r preliminaries, echo=FALSE, message=FALSE, results="hide"}
library("gamlss")
library("gamlss2")

if(!("tictoc" %in% installed.packages())) {
  install.packages("tictoc")
}
```

In order to add any new machine learning type algorithm in `gamlss2` you need to
define three _special_ functions:

-   A **special term constructor** function,
-   a **fitting** function and,
-   a **predict** function.

Here we demonstrate how this can be done using the local polynomial smoothing function
`loess()` in **R**, @Clevelandetal93.

Note that any regression type machine learning function is **R** can be easily incorporated in
`gamlss2` especially if there is a **prior weights** argument in the function.
`loess()` has the argument `weights` for prior weights so it can be incorporated easily.

## The special model term constructor

Any special model term constructor **must** be registered in the `fake_formula()` function.
If not yet registered, the user can provide a new special name in the `specials` argument
of `fake_formula()`. Another option is to use the special model term constructor name '"user"',
which is already part of the special names list in `fake_formula()`.

The definition function can take all relevant `loess` and `loess.control` arguments so it can pass them into the fitting function.

```{r}
lo <- function(formula, ...) 
{
  ## ensure it's a formula
  if(!inherits(formula, "formula")) {
    formula <- as.character(substitute(formula))
    formula <- as.formula(paste("~", formula))
    environment(formula) <- sys.frame(-1)
  }

  ## list for setting up the special model term 
  st <- list()

  ## control arguments
  st$control <- list(...)

  ## variables, label and data
  st$term <- all.vars(formula) 
  st$label <- paste0("lo(", paste0(gsub(" ", "",
    as.character(formula)), collapse = ""), ")") 
  st$data <- model.frame(formula)

  ## New model formula used for fitting.
  st$formula <- update(formula, response_z ~ .)

  ## Assign the "special" class and the new class "n".
  class(st) <- c("special", "lo")

  return(st) 
} 
```

## The fitting function


The fitting function takes the current working response, the iterative weights and the corresponding relevant term  and creates a call to the  `loess` function to fit the relevant model. It then saves the fitted values and the fitted objects for later use.  


```{r}
special_fit.lo <- function(x, z, w, control, ...)
{
## assign current working response and weights
  x$data$response_z <- z
  x$data$weights_w <- w
# set up loess call
  call <- "loess(formula = x$formula, data = x$data, weights = weights_w"
## add optional control parameters
  if(!is.null(x$control)) {
    for(j in names(x$control))
      call <- paste0(call, ", ", j, "= x$control$", j)
  }
call <- paste0(call, ")")
## estimate model
rval <- list("model" = eval(parse(text = call)))
## get the fitted.values
rval$fitted.values <- fitted(rval$model) 
## center fitted values
  rval$shift <- mean(rval$fitted.values)
  rval$fitted.values <- rval$fitted.values - rval$shift 

## degrees of freedom
  rval$edf <-  rval$model$trace.hat
## assign class for predict method 
  class(rval) <- "lo.fitted" 

  return(rval) 
} 
```

<!-- ## Transferring the weights for the next backfitting iteration. -->
<!--   ## Note, "transfer" can be used to transfer anything from one -->
<!--   ## iteration to the next. -->
<!--   ## save the fitted object  -->
<!--   ## Possible scaling.  -->
<!--   rval$scalex <- x$scalex  -->

## The predict function

The prediction function shows how the predicted values of the model can be extracted.

```{r}
special_predict.lo.fitted <- function(x, data, se.fit = FALSE, ...) 
{
  p <- as.numeric(predict(x$model, newdata = data))
  p <- p - x$shift
  if(se.fit)
    p <- data.frame("fit" = p)
  return(p)
}
```

## Example: rent99 data

We use the `rent99` data to demonstrate the use of the functions

```{r}
## load the Munich rent data
data("rent99", package = "gamlss.data") 

## scale covariates
rent99$area <- scale(rent99$area)
rent99$yearc <- scale(rent99$yearc)
```
Note that the continuous variables in the data `area` and `yearc` have been standardised. 
We defined four formulae for modelling the rent data. The first two use `loess` and the third and fourth uses the additive smoothing function `s()` for comparison.  Formula `f` uses main effect smoothing terms for `area` and `yearc` for parameters $\mu$ and $\sigma$, respectively,  while the second, `f1`, uses  two dimensional smoothing functions for modelling one way interaction. The third formula uses one dimensional smoother for main effects and the fourth  two dimensional cubic splines smoothers for interactions.  Note that in this example we only use explanatory terms for the first two parameters  $\mu$ and $\sigma$  and constants for the rest, $\nu$ and $\tau$.



```{r}
f <- rent ~ lo(~area)+lo(~yearc)+location+bath+kitchen| 
            lo(~area)+lo(~yearc)+location+bath+kitchen|
            1|1 

f1 <- rent ~ lo(~area*yearc)+location+bath+kitchen| 
             lo(~area*yearc)+location+bath+kitchen|
             1|1

sf <- rent ~ s(~area)+s(~yearc)+location+bath+kitchen| 
             s(~area)+s(~yearc)+location+bath+kitchen|
            1|1 

sf1 <- rent ~ te(area,yearc) + location + bath + kitchen | 
              te(area,yearc) + location + bath + kitchen |
            1|1
```

## Estimation

Below we use the package `tictoc` to measure the time is taken to fit each model.
The main effect fit for `loess`  is; 

```{r}
library("tictoc")
tic()
b1 <- gamlss2(f, data = rent99, family = BCTo) 
toc()
```


The first order interaction fit for `loess` is;
```{r}
tic()
b2 <- gamlss2(f1, data = rent99, family = BCTo) 
toc()
```
Now the main effect model using `s()`
```{r}
library(tictoc)
tic()
a1<- gamlss2(sf, data = rent99, family = BCT) 
toc()
```
The interaction model using `te()` 
```{r}
library(tictoc)
tic()
a2<- gamlss2(sf1, data = rent99, family = BCT) 
toc()
```


The cubic spline function is lot faster than the `loess()` implementation `lo()`
in `gamlss2`, but let us now compare the models using AIC.

```{r}
## deviance
AIC(b1, b2, a1, a2, k = 0)

## BIC
AIC(b1, b2, a1, a2, k = log(nrow(rent99)))
```

It seems that the two `lo()` models do better that the `s()` as far as the
AIC criteria are concern. 


## Visualise the fits

The standard `plot()` function of `gamlss2` can be used to visualises  the smooth curves fits (under certain circumstances). For example for the main effect model using `lo()`   we have; 
```{r}
plot(b1)
```
Note that no standard errors are shown here compare to the `s()` function model shown below;
```{r}
plot(a1)
```


For the first order interaction model `b2` and  because the effects are not defined within `gamlss2` calling `plot()` produces the standard residual plots;  
```{r}
plot(b2)
```
For the first order interaction model `a2` using tensor products  the plot are more informative; 
```{r}
plot(a2)
```

One can use the function `vis.lo()` of the package `gamlss`  to visualised the fitted terms fitted with `lo()`. Here we show the `area` fitted values  for parameter $\mu$ and model `b` including the partial residuals from the model.

```{r}
gamlss:::vis.lo(specials(b1, model="mu")[[1]]$model, partial = TRUE)
```

Next we show the year of construction `yearc` fit for parameters $\mu$ from model `b`  without partial residuals.

```{r}
gamlss:::vis.lo(specials(b1, model = "mu")[[2]]$model, partial = FALSE)
```


Here we plot the fitted surface fit from model `b2` and parameters $\mu$;


```{r}
gamlss:::vis.lo(specials(b2, model = "mu")$model, partial = FALSE)
```

Here we plot the same fitted surface as above adding  a 95% confidence intervals;

```{r}
gamlss:::vis.lo(specials(b2, model = "mu")$model, se = 1.97)
```


Finally we plot the fitted surface fit from the $\mu$ model of `b2` adding the partial residuals. 

```{r}
gamlss:::vis.lo(specials(b2, model = "mu")$model, partial = TRUE)
```

Note that similar plots are given in section 9.6.3 of @Stasinopoulosetal2017, where the `lo()` function within package `gamlss`, is described.




