---
title: "Survival Models"
format: 
  html:
    html-math-method: mathjax
    toc: true
    number-sections: true
bibliography: gamlss2.bib
nocite: |
  @Rigby+Stasinopoulos:2005
vignette: >
  %\VignetteIndexEntry{Survival Models}
  %\VignetteEngine{quarto::html}
  %\VignetteDepends{gamlss2}
  %\VignetteKeywords{distributional regression, inference, forecasting}
  %\VignettePackage{gamlss2}
---

In survival analysis, we aim to model the time until an event occurs, which is typically
represented as a random variable $T$. The survival function $S(t)$ indicates the probability
that the event has not occurred by time $t$, mathematically defined as
$$
S(t) = P(T > t) = 1 - F(t),
$$
where $F(t)$ is the cumulative distribution function (CDF) of the random variable $T$.

The hazard function $\lambda(t)$, which describes the instantaneous risk of the event occurring
at time $t$, is defined as
$$
\lambda(t) = \frac{d(t)}{S(t)},
$$
where $d(t)$ is the probability density function (PDF) of $T$.

Within the GAMLSS framework, we can specify a parametric form for the hazard function by
selecting an appropriate distribution that fits the survival data, denoted as
$$
d(t \mid \boldsymbol{\theta}),
$$
where $d( \cdot )$ represents a parametric density suitable for modeling survival times and
$\boldsymbol{\theta} = (\theta_1, \ldots, \theta_K)^\top$ are the parameters that need
to be estimated.

To incorporate covariates into this model, we can express the parameters as functions of
explanatory variables $\theta_k(\mathbf{x})$ for $k = 1, \ldots, K$. We utilize GAM-type predictors
represented by
$$
\eta_{k}(\mathbf{x}) = f_1(\mathbf{x}) + \dots + f_{L_{k}}(\mathbf{x}),
$$
which are linked to the parameters through suitable link functions
$$
h_{k}(\theta_{k}(\mathbf{x})) = \eta_{k}(\mathbf{x}).
$$
The functions $f_l(\cdot)$ for $l = 1, \ldots, L_{k}$ can be nonlinear smooth functions
(typically estimated using regression splines), linear effects, or random effects, among others.
This flexible modeling approach allows for a richer representation of the relationship between
covariates and the distribution parameters compared to simple linear effects.

In GAMLSS, model estimation is generally performed using (penalized) maximum likelihood
estimation (MLE). The likelihood function for a survival model with right-censored data
for $i = 1, \ldots, n$ observations can be expressed as
$$
L(\boldsymbol{\beta}, \boldsymbol{\theta}) = \prod_{i=1}^{n} \left[ d(t_i \mid \boldsymbol{\theta}(\mathbf{x}_i)) \right]^{\delta_i} \left[ S(t_i \mid \boldsymbol{\theta}(\mathbf{x}_i)) \right]^{1 - \delta_i},
$$
where $\delta_i$ is the censoring indicator for the $i$-th observation. It takes the value of
1 if the event is observed (i.e., not censored) and 0 if it is censored. This likelihood
function effectively accounts for both observed and censored data, facilitating the estimation of model parameters.

## LeukSurv data example

```{r packages}
#| message: false
#| results: hide
#| echo: 3:8
pkg <- c("spBayesSurv", "gamlss.cens", "sf", "stars")
for(p in pkg) {
  if(!(p %in% installed.packages())) install.packages(p)
}
library("gamlss2")
library("gamlss.cens")
library("sf")
library("stars")
data("LeukSurv", package = "spBayesSurv")
```

We need to generate the censored family with

```{r}
gen.cens(WEI)
fam <- cens(WEI)
fam <- fam(mu.link = "log")
```

First, we estimate time only models.
```{r}
## using gamlss2
b1 <- gamlss2(Surv(time, cens) ~ 1, family = fam, data = LeukSurv)

## and now with survfit
s1 <- survfit(Surv(time, cens) ~ 1, data = LeukSurv)
```

Predict survival curves.

```{r}
## gamlss2 survival, predict parameters
par <- predict(b1, newdata = LeukSurv)

## compute survival probabilities
p1 <- 1 - family(b1)$p(Surv(LeukSurv$time, rep(1, nrow(LeukSurv))), par)

## surfit() survival
f <- stepfun(s1$time, c(1, s1$surv))
p2 <- f(LeukSurv$time)
```

Plot estimated curves.

```{r}
matplot(LeukSurv$time, cbind(p1, p2),
  type = "l", lty = 1, lwd = 2, col = 1:2,
  xlab = "Time", ylab = "Survival Prob(t > Time)",
  main = "Estimated Survival Curves")
legend("topright", c("gamlss2", "survfit"),
  lwd = 2, col = 1:2, bty = "n")
```

## Spatial survival model

Now, we estimate a full spatial survival model.

```{r}
## model formula
f <- Surv(time, cens) ~ sex + s(age) + s(wbc) + s(tpi) + s(xcoord, ycoord) |
  sex + s(age) + s(wbc) + s(tpi) + s(xcoord, ycoord)

## estimate model
b2 <- gamlss2(f, family = fam, data = LeukSurv)
```

Plot estimated effects.

```{r}
#| fig-height: 8
#| fig-width: 6
#| fig-align: center
plot(b2)
```

Residuals diagnostic plots.

```{r}
#| fig-align: center
plot(b2, which = "resid")
```

Visualize the spatial effect.

```{r}
#| fig-align: center
## read the map of new west england.
file <- system.file("otherdata/nwengland.bnd", package = "spBayesSurv")
d <- readLines(file)

## transform the polygons to a list().
id <- grep('\"', d, fixed = TRUE)
polys <- list()
for(i in 1:length(id)) {
  j <- strsplit(d[id[i]], ",")[[1]][2]
  if(i < length(id))
    polys[[j]] <- d[(id[i] + 1):(id[i + 1] - 1)]
  else
    polys[[j]] <- d[(id[i] + 1):length(d)]
}

polys <- lapply(polys, function(x) {
  tf <- tempfile()
  writeLines(x, tf)
  pol <- as.matrix(read.csv(tf, header = FALSE))
  unlink(tf)
  return(st_polygon(list(pol)))
})

## transform to sf object
polys_sfc <- st_sfc(polys)
map <- st_sf(geometry = polys_sfc)
map$id <- names(polys)
map$district <- 1:nrow(map)

## plot the map
par(mar = rep(0, 4))
plot(st_geometry(map))
```

```{r}
#| fig-align: center
## sample coordinates for plotting
co <- st_sample(map, size = 10000, type = "regular")

## create new data for prediction
nd <- as.data.frame(st_coordinates(co))
names(nd) <- c("xcoord", "ycoord")
nd$sex <- 1
nd$wbc <- mean(LeukSurv$wbc)
nd$tpi <- mean(LeukSurv$tpi)
nd$age <- mean(LeukSurv$age)

## predict parameters
par <- predict(b2, newdata = nd)

## compute survival probabilities
p2 <- 1 - family(b2)$p(Surv(rep(365, nrow(nd)), rep(1, nrow(nd))), par)

## plot on map
sp <- st_sf(geometry = co)
sp$survprob <- p2

## reference system, only used for plotting
sp <- st_set_crs(sp, 4326)
map <- st_set_crs(map, 4326)

## plot as raster map
spr <- st_as_stars(sp)

par(mar = c(0, 0, 5, 0))
plot(spr, main = "Survival Probabilities Prob(t > 365)",
  reset = FALSE, nbreaks = 100)
plot(st_geometry(map), add = TRUE)
box()
```

